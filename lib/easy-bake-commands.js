// Generated by CoffeeScript 1.3.3
(function() {
  var ebc, spawn;

  ebc = this.ebc = typeof exports !== 'undefined' ? exports : {};

  ebc.Queue = (function() {

    function Queue() {
      this.commands_queue = [];
      this.is_running = false;
      this.errors = [];
    }

    Queue.prototype.commands = function() {
      return this.commands_queue;
    };

    Queue.prototype.errorCount = function() {
      return this.errors.length;
    };

    Queue.prototype.push = function(command) {
      return this.commands_queue.push(command);
    };

    Queue.prototype.run = function(callback, run_options) {
      var current_index, done, next,
        _this = this;
      if (this.is_running) {
        throw 'queue is already running';
      }
      this.is_running = true;
      this.errors = [];
      current_index = 0;
      done = function() {
        _this.is_running = false;
        return typeof callback === "function" ? callback(_this.errors.length, _this) : void 0;
      };
      next = function(code, task) {
        if ((code !== 0) && (arguments.length !== 0)) {
          _this.errors.push({
            code: code,
            task: task
          });
        }
        if (++current_index < _this.commands_queue.length) {
          return _this.commands_queue[current_index].run(next, run_options, _this);
        } else {
          return done();
        }
      };
      if (this.commands_queue.length) {
        return this.commands_queue[current_index].run(next, run_options, this);
      } else {
        return done();
      }
    };

    return Queue;

  })();

  spawn = require('child_process').spawn;

  ebc.RunQueue = (function() {

    function RunQueue(run_queue, name) {
      this.run_queue = run_queue;
      this.name = name;
    }

    RunQueue.prototype.queue = function() {
      return this.run_queue;
    };

    RunQueue.prototype.run = function(callback, run_options) {
      if (run_options == null) {
        run_options = {};
      }
      if (run_options.verbose) {
        console.log("running queue: " + this.name);
      }
      return this.run_queue.run(callback, run_options);
    };

    return RunQueue;

  })();

  ebc.RunCommand = (function() {

    function RunCommand(command, args, options) {
      this.command = command;
      this.args = args != null ? args : [];
      this.options = options != null ? options : {};
    }

    RunCommand.prototype.run = function(callback, run_options) {
      var message, spawned;
      if (run_options == null) {
        run_options = {};
      }
      if (run_options.preview || run_options.verbose) {
        message = "" + this.command + " " + (this.args.join(' '));
        if (this.options.cwd) {
          message = "" + (this.options.root_dir ? this.options.cwd.replace(this.options.root_dir, '') : this.options.cwd) + ": " + message;
        }
        console.log(message);
        if (run_options.preview) {
          if (typeof callback === "function") {
            callback(0, this);
          }
          return;
        }
      }
      spawned = spawn(this.command, this.args, this.options);
      spawned.stderr.on('data', function(data) {
        return process.stderr.write(data.toString());
      });
      spawned.stdout.on('data', function(data) {
        return process.stderr.write(data.toString());
      });
      return spawned.on('exit', function(code) {
        return typeof callback === "function" ? callback(code, this) : void 0;
      });
    };

    return RunCommand;

  })();

  ebc.CopyFile = (function() {

    function CopyFile(src, to_directory, options) {
      this.src = src;
      this.to_directory = to_directory;
      this.options = options != null ? options : {};
    }

    CopyFile.prototype.run = function(callback, run_options) {
      var spawned,
        _this = this;
      if (run_options == null) {
        run_options = {};
      }
      if (run_options.preview || run_options.verbose) {
        console.log("cp " + this.src + " " + this.to_directory);
        if (run_options.preview) {
          if (typeof callback === "function") {
            callback(0, this);
          }
          return;
        }
      }
      spawned = spawn('cp', [this.src, this.to_directory]);
      spawned.stderr.on('data', function(data) {
        process.stderr.write(data.toString());
        return callback(code, this);
      });
      return spawned.on('exit', function(code) {
        console.log("copied " + (_this.baker.YAMLRelative(_this.src)) + " " + _this.to_directory);
        return callback(code, _this);
      });
    };

    return CopyFile;

  })();

}).call(this);
