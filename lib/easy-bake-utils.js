// Generated by CoffeeScript 1.3.3
(function() {
  var eb, fs, globber, path, _;

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  globber = require('glob-whatev');

  if (!eb) {
    eb = {};
  }

  if (!this.eb) {
    this.eb = {};
  }

  eb.utils = this.eb.utils = typeof exports !== 'undefined' ? exports : {};

  eb.utils.extractSetOptions = function(set, mode, defaults) {
    var set_options;
    set_options = _.clone(set);
    if (set.options) {
      if (set.options['global']) {
        _.extend(set_options, set.options['global']);
      }
      if (set.options[mode]) {
        _.extend(set_options, set.options[mode]);
      }
      delete set_options['options'];
    }
    if (defaults) {
      _.defaults(set_options, defaults);
    }
    return set_options;
  };

  eb.utils.getOptionsFileGroups = function(set_options, root_dir) {
    var directories, directory, file_groups, files, no_files_ok, pathed_files, _i, _len;
    file_groups = [];
    directories = set_options.hasOwnProperty('directories') ? set_options.directories : ['.'];
    files = set_options.hasOwnProperty('files') ? set_options.files : ['**/*'];
    no_files_ok = set_options.hasOwnProperty('no_files_ok') ? set_options.no_files_ok : void 0;
    for (_i = 0, _len = directories.length; _i < _len; _i++) {
      directory = directories[_i];
      if (!path.existsSync(directory)) {
        console.log("warning: directory is missing " + directory);
        continue;
      }
      directory = fs.realpathSync(directory);
      pathed_files = [];
      _.each(files, function(rel_file) {
        var count, rel_directory;
        count = pathed_files.length;
        globber.glob("" + directory + "/" + rel_file).forEach(function(pathed_file) {
          return pathed_files.push(pathed_file);
        });
        if (count === pathed_files.length) {
          rel_directory = directory.replace("" + root_dir + "/", '');
          if (!no_files_ok || !_.contains(no_files_ok, rel_directory)) {
            return console.log("warning: files not found " + directory + "/" + rel_file);
          }
        }
      });
      if (!pathed_files.length) {
        continue;
      }
      file_groups.push({
        directory: directory,
        files: pathed_files
      });
    }
    return file_groups;
  };

  eb.utils.resolvePath = function(directory, current_root, root_dir) {
    var stripped_directory;
    if (directory.match(/^\.\//)) {
      stripped_directory = directory.substr(2);
      if (directory === './') {
        return current_root;
      } else {
        return "" + current_root + "/" + stripped_directory;
      }
    } else if (directory === '.') {
      stripped_directory = directory.substr(1);
      return "" + current_root + "/" + stripped_directory;
    } else if (directory[0] === '/') {
      return directory;
    } else if (directory.match(/^\{root\}/)) {
      stripped_directory = directory.substr(6);
      if (directory === '{root}') {
        return root_dir;
      } else {
        return "" + root_dir + "/" + stripped_directory;
      }
    } else {
      return "" + root_dir + "/" + directory;
    }
  };

  eb.utils.builtName = function(output_name) {
    return output_name.replace(/\.coffee$/, ".js");
  };

  eb.utils.compressedName = function(output_name) {
    return output_name.replace(/\.js$/, ".min.js");
  };

}).call(this);
